// main.rain file
// 
// This is file for showcasing the syntax of my programming language aka. Rain.
// Syntax is inspired from many languages, heavly Jai, Javascript, C++, and Wren.
//
// Enjoy!

/// Main function, everything starts from here:

main :: () {
    println("Hello world!")

    return 0
}

/// Variables:

// Mutuable variable
x := 5

// Constant
y :: 6

// Specify variable like this:

foo: int = 65
bar: float = 3 // will be turned into 3.0


/// Functions:

hello :: (name) {
	println("Hello ${name}!")
}

hello("Sky") // > "Hello Sky!"

// squared2 :: (x) {
// 	return x ** 2
// }

// In Rain if you want to just straight up return the value (with calculations or not), just write it, and forget the return keyword:
squared :: (x) {
	x ** 2
}
// This could be useful if you want just to return a value
// and that you don't want to run anything before that return statement

println("The squared of 5 is: ${squared(5)}") // > "The squared of 5 is: 25"

// Optional arguments need a default value (like you can see on y argument), and if you want you want specify what return value will be, just add the variable type after parantheses:
squared_by :: (x, y = 2) int {
	return x ** y
}


/// Objects:

z :: object {
	"foo": 1,
	"bar": x
	"baz": this["foo"] + 1 // To get a value from inside from the same object, use `this['value']`
}

/// Structs:

Vector2 :: struct
{
    x: int;
    y: int;
}

a := Vector2 { 6, 5 }

println(a.x) // > 6

println(a) // > Vector2 { x: 6, y: 5 }

// Functions for structs:

Vector2 : magnitude : () {
	return int(sqrt(this.x * this.x + this.y * this.y));
}

println(a.magnitude()) // > 7.8

/// Fibers:

// Create a fiber like this:
foo :: fiber() {
	println("Fiber call!")
}

// And call it:
foo.call() // > "Fiber call!"

// Yielding:
// Fibers

/// Comments:

// One line comments

/*
    Multiple line comments
*/

/// Operators:

// `::`:

// Initializator or `::` can be used to create a function, a struct or an constant that like a struct and function can't be modified after creation.

// You can specify the constants' variable type before the second `:`:
x: int : 5

// It's possible to initialize a function inside of a struct by giving it the function name after the first colon (`:`), and after that

StructName : FuncName : () {
	// do something...
}


// `:=`:

// The second initializator (`:=`) also known as walrus operator, creates a modifiable variable:
x := 5

// You can specify the variable type before the `=` operator:
x: int = 5

// Import and Modules



